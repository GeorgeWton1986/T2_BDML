newdata = test_factors,
type = "response"), #type = "response" gives the predicted probabilities.
prob_logodds = predict(est_logit,
newdata = test_factors,
type = "link"), #type = "link" gives the predicted log-odds.
prob2 = predict(est_logit,
newdata = test_factors)
)
head(predictSample_logit %>%
select(id,pobre,prob_hat,prob_logodds,prob2))
#Predecir los resultados a partir de los estimadores Logit
predictSample_logit<- test_factors %>%
mutate(prob_hat=predict(est_logit,
newdata = test_factors,
type = "response"), #type = "response" gives the predicted probabilities.
prob_logodds = predict(est_logit,
newdata = test_factors,
type = "link"), #type = "link" gives the predicted log-odds.
prob2 = predict(est_logit,
newdata = test_factors)
)
head(predictSample_logit %>%
select(id,pobre,prob_hat,prob_logodds,prob2))
head(predictSample_logit %>%
select(id,Pobre,prob_hat,prob_logodds,prob2))
View(predictSample_logit)
View(test_factors)
View(test)
#Calculo de los estimadores Logit
mod_1_logit<- glm(Pobre~.,
data = train_factors,
family = "binomial")
View(train_factors)
#Predecir los resultados a partir de los estimadores Logit
predictSample_logit<- train_factors %>%
mutate(prob_hat=predict(est_logit,
newdata = train_factors,
type = "response"), #type = "response" gives the predicted probabilities.
prob_logodds = predict(est_logit,
newdata = train_factors,
type = "link"), #type = "link" gives the predicted log-odds.
prob2 = predict(est_logit,
newdata = train_factors)
)
head(predictSample_logit %>%
select(id,Pobre,prob_hat,prob_logodds,prob2))
head(predictSample_logit %>%
select(Pobre,prob_hat,prob_logodds,prob2))
head(predictSample_logit %>%
select(Pobre,prob_hat,prob_logodds,prob2))
predictSample_logit<- predictSample_logit %>%
mutate(pobre=ifelse(pobre_lab=="Yes",1,0)) %>%
select(id,pobre)
predictSample_logit<- predictSample_logit %>%
mutate(pobre=ifelse(pobre=="Yes",1,0)) %>%
select(id,pobre)
predictSample_logit<- predictSample_logit %>%
mutate(pobre=ifelse(pobre=="Yes",1,0)) %>%
select(pobre)
predictSample_logit<- predictSample_logit %>%
mutate(Pobre=ifelse(Pobre=="Yes",1,0)) %>%
select(Pobre,prob_hat,prob_logodds,prob2)
head(predictSample_logit)
rule <- 1/2 # Bayes Rule
predictSample_logit<- predictSample_logit %>%
mutate(prob_pobre=ifelse(prob_hat>rule,1,0))    ## predicted class labels
head(predictSample_logit %>%
select(Pobre,prob_hat,prob_pobre))
with(predictSample_logit,table(Pobre,prob_hat))
with(predictSample_logit,table(Pobre,prob_pobre))
A <- with(predictSample_logit,table(Pobre,prob_pobre))
Accuracy <- (A[1]+ A[4])/(A[1]+ A[2] + A[3]+  A[4])
Accuracy
## plot a mosaic
plot(Default ~ history, data=credit, col=c(8,2), ylab="Default") ## surprise!
View(predictSample_logit)
## plot a mosaic
plot(Pobre ~ prob_hat, data=predictSample_logit, col=c(8,2), ylab="Pobre") ## surprise!
#Predecir los resultados a partir de los estimadores Logit
predictSample_logit<- train_factors %>%
mutate(prob_hat=predict(est_logit,
newdata = train_factors,
type = "response"), #type = "response" gives the predicted probabilities.
prob_logodds = predict(est_logit,
newdata = train_factors,
type = "link"), #type = "link" gives the predicted log-odds.
prob2 = predict(est_logit,
newdata = train_factors))
head(predictSample_logit %>%
select(Pobre,prob_hat,prob_logodds,prob2))
rule <- 1/2 # Bayes Rule
predictSample_logit<- predictSample_logit %>%
mutate(prob_pobre=ifelse(prob_hat>rule,1,0))    ## predicted class labels
head(predictSample_logit %>%
select(Pobre,prob_hat,prob_pobre))
A <- with(predictSample_logit,table(Pobre,prob_pobre))
Accuracy <- (A[1]+ A[4])/(A[1]+ A[2] + A[3]+  A[4])
Accuracy
## plot a mosaic
plot(Pobre ~ prob_hat, data=predictSample_logit, col=c(8,2), ylab="Pobre") ## surprise!
head(predictSample_logit %>%
select(Pobre,prob_hat,prob_logodds,prob2))
rule <- 1/2 # Bayes Rule
predictSample_logit<- predictSample_logit %>%
mutate(prob_pobre=ifelse(prob_hat>rule,1,0))    ## predicted class labels
head(predictSample_logit %>%
select(Pobre,prob_hat,prob_pobre))
A <- with(predictSample_logit,table(Pobre,prob_pobre))
Accuracy <- (A[1]+ A[4])/(A[1]+ A[2] + A[3]+  A[4])
Accuracy
## plot a mosaic
plot(Pobre ~ prob_hat, data=predictSample_logit, col=c(8,2), ylab="Pobre") ## surprise!
## plot a mosaic
plot(Pobre ~ Dominio, data=predictSample_logit, col=c(8,2), ylab="Pobre") ## surprise!
ctrl<- trainControl(method = "cv",
number = 5,
classProbs = TRUE,
savePredictions = TRUE,
verbose=T
)
set.seed(123)
mod_2_logit <- train(Pobre~. ,
data = train_factors,
method = "glm",
family = "binomial",
trControl = ctrl
)
mod_2_logit
default_logit$resample
mod_2_logit$resample
print(paste("Mean accuracy: ",mean(default_logit$resample$Accuracy)))
print(paste("Mean accuracy: ",mean(mod_2_logit$resample$Accuracy)))
logit_accuracy<-mod_2_logit$results$Accuracy
logit_accuracy
View(mod_2_logit)
View(mod_2_logit)
View(mod_2_logit)
View(mod_2_logit)
predict_logit <- data.frame(
Pobre = mod_2_logit$Pobre,  ## observed class labels
prob_hat = predict(mod_2_logit,
newdata = train_factors,
type = "prob"),     ## predicted class probabilities
pred = predict(mod_2_logit,
newdata = train_factors,
type = "raw")    ## predicted class labels
)
predict_logit <- data.frame(
Pobre = predictSample_logit$Pobre,  ## observed class labels
prob_hat = predict(mod_2_logit,
newdata = train_factors,
type = "prob"),     ## predicted class probabilities
pred = predict(mod_2_logit,
newdata = train_factors,
type = "raw")    ## predicted class labels
)
head(predict_logit)
View(test_factors)
View(train_factors)
predict_logit <- test_factors   %>%
mutate(prob_hat = predict(mod_2_logit,
newdata = test_factors,
type = "prob"),
pred = predict(mod_2_logit,
newdata = test_factors,
type = "raw"))%>%
select(id,prob_hat, pred)
head(predict_logit)
predict_logit <- data.frame(
Pobre = predictSample_logit$Pobre,  ## Toma la columnas Pobre de predictSample
prob_hat = predict(mod_2_logit,
newdata = test_factors,
type = "prob"),     ## predicted class probabilities
pred = predict(mod_2_logit,
newdata = test_factors,
type = "raw"))%>%
select(id,pobre_lab)
predict_logit <- test_factors   %>%
mutate(prob_hat = predict(mod_2_logit,
newdata = test_factors,
type = "prob"),
pred = predict(mod_2_logit,
newdata = test_factors,
type = "raw"))%>%
select(id,prob_hat, pred)
head(predict_logit)
predict_logit <- test_factors   %>%
mutate(prob_hat = predict(mod_2_logit,
newdata = test_factors,
type = "prob"),
pred = predict(mod_2_logit,
newdata = test_factors,
type = "raw"))%>%
select(id,prob_hat, pred)
predict_logit <- test_factors   %>%
mutate(prob_hat = predict(mod_2_logit,
newdata = test_factors,
type = "prob"),
pred = predict(mod_2_logit,
newdata = test_factors,
type = "raw"))%>%
select(id,prob_hat, pred)
head(predict_logit)
predict_logit <- test_factors   %>%
mutate(pred = predict(mod_2_logit,
newdata = test_factors,
type = "raw"))%>%
select(id,prob_hat, pred)
predict_logit <- test_factors   %>%
mutate(pred = predict(mod_2_logit,
newdata = test_factors,
type = "raw"))%>%
select(id,pred)
head(predict_logit)
predict_logit <- test_factors   %>%
mutate(pred = pobre(mod_2_logit,
newdata = test_factors,
type = "raw"))%>%
select(id,pred)
predict_logit <- test_factors   %>%
mutate(pred = pobre(mod_2_logit,
newdata = test_factors,
type = "raw"))%>%
select(id,pobre)
predict_logit <- test_factors   %>%
mutate(pobre = predict(mod_2_logit,
newdata = test_factors,
type = "raw"))%>%
select(id,pobre)
head(predict_logit)
predict_logit <- test_factors   %>%
mutate(pobre = predict(mod_2_logit,
newdata = test_factors,
type = "raw"))%>%
select(id,pobre)
head(predict_logit)
predict_logit<- predict_logit %>%
mutate(pobre=ifelse(pobre_lab=="Yes",1,0)) %>%
select(id,pobre)
predict_logit<- predict_logit %>%
mutate(pobre=ifelse(pobre=="Yes",1,0)) %>%
select(id,pobre)
head(predict_logit)
nrow(predictSample_EN)
str(predictSample_EN)
head(predictSample_EN)
nrow(predict_logit)
str(predict_logit)
head(predict_logit)
nrow(predict_logit)
str(predict_logit)
head(predict_logit)
write.csv(predictSample_EN, "/Users/jorgeviafara/Library/CloudStorage/OneDrive-Personal/MAESTRIA EN ECONOMIA/01 MATERIAS MECA/4107 BIG DATA/T2_BDML_personal/sample_equipo4_Logit.csv", row.names = FALSE)
#Calculo de los estimadores Logit
mod_1_logit<- glm(Pobre~.,
data = train_factors,
family = "binomial")
summary(mod_1_logit,type="text")
#Predecir los resultados a partir de los estimadores Logit
predictSample_logit<- train_factors %>%
mutate(prob_hat=predict(est_logit,
newdata = train_factors,
type = "response"), #type = "response" gives the predicted probabilities.
prob_logodds = predict(est_logit,
newdata = train_factors,
type = "link"), #type = "link" gives the predicted log-odds.
prob2 = predict(est_logit,
newdata = train_factors))
head(predictSample_logit %>%
select(Pobre,prob_hat,prob_logodds,prob2))
#Calculo de probabilidades
predictSample_logit<- train_factors %>%
mutate(prob_hat=predict(est_logit,
newdata = train_factors,
type = "response"), #type = "response" gives the predicted probabilities.
prob_logodds = predict(est_logit,
newdata = train_factors,
type = "link"), #type = "link" gives the predicted log-odds.
prob2 = predict(est_logit,
newdata = train_factors))
#Calculo de probabilidades
predictSample_logit<- train_factors %>%
mutate(prob_hat=predict(est_logit,
newdata = train_factors,
type = "response"), #type = "response" gives the predicted probabilities.
prob_logodds = predict(est_logit,
newdata = train_factors,
type = "link"), #type = "link" gives the predicted log-odds.
prob2 = predict(est_logit,
newdata = train_factors))
#Calculo de probabilidades
prob_logit<- train_factors %>%
mutate(prob_hat=predict(est_logit,
newdata = train_factors,
type = "response"), #type = "response" gives the predicted probabilities.
prob_logodds = predict(est_logit,
newdata = train_factors,
type = "link"), #type = "link" gives the predicted log-odds.
prob2 = predict(est_logit,
newdata = train_factors))
#Calculo de los estimadores Logit
mod_1_logit<- glm(Pobre~.,
data = train_factors,
family = "binomial")
summary(mod_1_logit,type="text")
#Calculo de probabilidades
prob_logit<- train_factors %>%
mutate(prob_hat=predict(mod_1_logit,
newdata = train_factors,
type = "response"), #type = "response" gives the predicted probabilities.
prob_logodds = predict(mod_1_logit,
newdata = train_factors,
type = "link"), #type = "link" gives the predicted log-odds.
prob2 = predict(mod_1_logit,
newdata = train_factors))
head(prob_logit %>%
select(Pobre,prob_hat,prob_logodds,prob2))
head(prob_logit %>%
select(Pobre,prob_hat, ))
rule <- 1/2 # Bayes Rule
prob_logit<- prob_logit %>%
mutate(pred_pobre=ifelse(prob_hat>rule,1,0))    ## prediccion de pobre
head(prob_logit %>%
select(Pobre,prob_hat,pred_pobre))
A <- with(predictSample_logit,table(Pobre,prob_pobre))
A <- with(pred_pobre,table(Pobre,pred_pobre))
A <- with(prob_logit,table(Pobre,pred_pobre))
Accuracy <- (A[1]+ A[4])/(A[1]+ A[2] + A[3]+  A[4])
Accuracy
ctrl<- trainControl(method = "cv",
number = 5,
classProbs = TRUE,
savePredictions = TRUE,
verbose=T
)
set.seed(123)
mod_2_logit <- train(Pobre~. ,
data = train_factors,
method = "glm",
family = "binomial",
trControl = ctrl
)
print(paste("Mean accuracy: ",mean(mod_2_logit$resample$Accuracy)))
logit_accuracy<-mod_2_logit$results$Accuracy
logit_accuracy
set.seed(123)
mod_2_logit <- train(Pobre~. ,
data = train_factors,
method = "glm",
family = "binomial",
trControl = ctrl
)
mod_2_logit
#Crear un Data Frame con las observaciones iniciales y luego predecir con la muestra test
predictTest_logit <- data.frame(
obs = prob_logit$Pobre,
predict(mod_2_logit,
newdata = test_factors,
type = "prob"), #Prediccion con probabilidades
pred = predict(mod_2_logit,
newdata = test_factors,
type = "raw")
)
#Crear un Data Frame con las observaciones iniciales y luego predecir con la muestra test
predictTest_logit <- data.frame(
obs = prob_logit$Pobre,
predict(mod_2_logit,
newdata = test_factors,
type = "prob"), #Prediccion con probabilidades
pred = predict(mod_2_logit,
newdata = test_factors,
type = "raw")
)
#Crear un Data Frame con las observaciones iniciales y luego predecir con la muestra test
predictTest_logit <- data.frame(
pred_test_prob = predict(mod_2_logit,
newdata = test_factors,
type = "prob"), #Prediccion con probabilidades
pred_test_raw = predict(mod_2_logit,
newdata = test_factors,
type = "raw")
)
head(predictTest_logit)
head(id,predictTest_logit)
#Crear un Data Frame con las observaciones iniciales y luego predecir con la muestra test
predictTest_logit <- data.frame(
pred_test_prob = predict(mod_2_logit,
newdata = test_factors,
type = "prob"), #Prediccion con probabilidades
pred_test_raw = predict(mod_2_logit,
newdata = test_factors,
type = "raw")
)
head(id,predictTest_logit)
#Crear un Data Frame con las observaciones iniciales y luego predecir con la muestra test
predictTest_logit <- data.frame(
pred_test_prob = predict(mod_2_logit,
newdata = test_factors,
type = "prob"), #Prediccion con probabilidades
pred_test_raw = predict(mod_2_logit,
newdata = test_factors,
type = "raw")
)
head(predictTest_logit)
#Crear un Data Frame con las observaciones iniciales y luego predecir con la muestra test
predictTest_logit <- data.frame(
pred_test_prob = predict(mod_2_logit,
newdata = test_factors,
type = "prob"), #Prediccion con probabilidades
pred_test_raw = predict(mod_2_logit,
newdata = test_factors,
type = "raw")) %>%
select(id,pred_test_prob,pred_test_raw)
#Crear un Data Frame con las observaciones iniciales y luego predecir con la muestra test
predictTest_logit <- data.frame(
pred_test_prob = predict(mod_2_logit,
newdata = test_factors,
type = "prob"), #Prediccion con probabilidades
pred_test_raw = predict(mod_2_logit,
newdata = test_factors,
type = "raw"))
head(predictTest_logit)
predict_logit <- test_factors   %>%
mutate(predictTest_logit) %>%
select(id,predictTest_logit$pred_test_raw)
predict_logit <- test_factors   %>%
mutate(pred_test_prob = predict(mod_2_logit,
newdata = test_factors,
type = "prob"), #Prediccion con probabilidades
pred_test_raw = predict(mod_2_logit,
newdata = test_factors,
type = "raw"))%>%
select(id,pred_test_raw)
head(predict_logit)
predictTest_logit <- test_factors   %>%
mutate(pred_test_prob = predict(mod_2_logit,
newdata = test_factors,
type = "prob"), #Prediccion con probabilidades
pred_test_raw = predict(mod_2_logit,
newdata = test_factors,
type = "raw"))%>%
select(id,pred_test_raw)
head(predict_logit)
predictTest_logit<- predictTest_logit %>%
mutate(pred_test_raw=ifelse(pobre=="Yes",1,0)) %>%
select(id,pred_test_raw)
predictTest_logit<- predictTest_logit %>%
mutate(pred_test_raw=ifelse(pred_test_raw=="Yes",1,0)) %>%
select(id,pred_test_raw)
head(predict_logit)
View(predictTest_logit)
predictTest_logit<- predictTest_logit %>%
mutate(pred_test_raw=ifelse(pred_test_raw=="Yes",1,0)) %>%
select(id,pred_test_raw)
head(predictTest_logit)
predictTest_logit <- test_factors   %>%
mutate(pred_test_prob = predict(mod_2_logit,
newdata = test_factors,
type = "prob"), #Prediccion con probabilidades
pred_test_raw = predict(mod_2_logit,
newdata = test_factors,
type = "raw"))%>%
select(id,pred_test_raw)
head(predict_logit)
predictTest_logit<- predictTest_logit %>%
mutate(pred_test_raw=ifelse(pred_test_raw=="Yes",1,0)) %>%
select(id,pred_test_raw)
head(predictTest_logit)
nrow(predict_logit)
str(predict_logit)
head(predict_logit)
nrow(predictTest_logit)
str(predictTest_logit)
head(predictTest_logit)
write.csv(predictTest_logit, "/Users/jorgeviafara/Library/CloudStorage/OneDrive-Personal/MAESTRIA EN ECONOMIA/01 MATERIAS MECA/4107 BIG DATA/T2_BDML_personal/sample_equipo4_Logit.csv", row.names = FALSE)
predictTest_logit<- predictTest_logit %>%
mutate(Pobre=ifelse(pred_test_raw=="Yes",1,0)) %>%
select(id,Pobre)
head(predictTest_logit)
predictTest_logit<- predictTest_logit %>%
mutate(Pobre_test=ifelse(pred_test_raw=="Yes",1,0)) %>%
select(id,Pobre_test)
predictTest_logit <- test_factors   %>%
mutate(pred_test_prob = predict(mod_2_logit,
newdata = test_factors,
type = "prob"), #Prediccion con probabilidades
pred_test_raw = predict(mod_2_logit,
newdata = test_factors,
type = "raw"))%>%
select(id,pred_test_raw)
head(predict_logit)
predictTest_logit<- predictTest_logit %>%
mutate(Pobre_test=ifelse(pred_test_raw=="Yes",1,0)) %>%
select(id,Pobre_test)
head(predictTest_logit)
#Matriz de confusión
mc_logit_test <- confusionMatrix(data = predictTest_logit$Pobre_test,
positive = "1",
mode = "prec_recall"
)
#Matriz de confusión
mc_logit_test <- confusionMatrix(data = predictTest_logit$Pobre_test,
reference = predictTest_logit$Pobre_test,
positive = "1",
mode = "prec_recall"
)
A <- with(prob_logit,table(Pobre,pred_pobre))
Accuracy <- (A[1]+ A[4])/(A[1]+ A[2] + A[3]+  A[4])
Accuracy
print(paste("Mean accuracy: ",mean(mod_2_logit$resample$Accuracy)))
logit_accuracy<-mod_2_logit$results$Accuracy
logit_accuracy
